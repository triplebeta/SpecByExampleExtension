<#@ output extension=".txt" #>
<#@ assembly name="$(SolutionDir)\packages\HtmlAgilityPack.1.4.6\lib\Net40\HtmlAgilityPack.dll" #>
<#@ assembly name="$(SolutionDir)\SpecByExample.T4\bin\Debug\SpecByExample.T4.dll" #>
<#@ import namespace="System.IO" #>
<#
	/*
		This file is just to start another template for testing.
		It will invoke the PageObject.Main.tt file, which will also be invoked by the Wizard.
		Then, PageObject.Main will include PageObject.Template.tt which defines the common structure of the PageObject class.
		For each type of page it will then include the approrpriate subtemplate:
		- GenericPage:	PageObject.GenericPage.tt
		- TablePage:	PageObject.TablePage.tt		(which might use PageObject.GenericPage.tt internally)

		Use the txt extension to prevent compiling the generated code in this project by Visual Studio
    */
try
{
	var testSettings = new CodeGenerationSettings();
	testSettings.PageName= "MyTestPage";
	testSettings.PageInfo.PageNumber = "S123";
//	testSettings.PageUrl = @"E:\TestMetTabel.Htm";
    testSettings.PageUrl = "http://www.google.nl";


	// Use the WebBrowser control to load the page and render it, this ensures all JavaScript will be executed as well.
    // Then feed the HTML to the HtmlAgilityPack document.
	var webbrowser = new WebBrowser();
    webbrowser.Navigate(new Uri(testSettings.PageUrl));
    while (webbrowser.ReadyState != WebBrowserReadyState.Complete)
    {
        // Dirty but the most easy way to wait for it synchroneously
        System.Threading.Thread.Sleep(250);
        Application.DoEvents();
    }

	// NOTE: This works only because the Template tag in the Main file contains the attribute hostspecific="true"
	string configFile = Host.ResolvePath(@"..\ControlAdapterMapping.config");
	var config = WizardConfigLoader.LoadWizardConfiguration(configFile);
	if (config==null)
		throw new InvalidOperationException("Configuration file not found or it is invalid. ");

    // At this point, the HTML is loaded completely
    string html = webbrowser.DocumentText;
    var doc = HtmlLoader.LoadDocumentFromHtml(html);
	testSettings.SelectedHtmlElements = HtmlLoader.GetHtmlControls(doc, config.Controls, false, testSettings.Options);
	testSettings.PageInfo = HtmlLoader.GetPageInfo(doc);

    // Rename one control so we know it works
//	foreach(var ctrl in testSettings.SelectedHtmlElements)
//		ctrl.UserDefinedName="JaDitIsM";

    // Enable this to test with a table page
	if (false)
    {
		// Define which HTML table we we use as the main table for the Table PageObject
		var table = new SeleniumTableInfo();
		table.EntityName = "Medewerker";				// Singular name of the entity represented by one row in the table
		table.TableName = "MyEmployeeTable";			// Name assigned to the generated WebTable property wrapping the HTML table element

		table.Columns.Add(new TableColumnDef(1,"Firstname", "firstname", "string"));
		table.Columns.Add(new TableColumnDef(1,"Lastname", "lastname", "string"));

		testSettings.TypeOfPage = PageTemplatesEnum.TablePage;
		testSettings.TableInfo = table;
    }
	Session.Add("WizardSettings",testSettings);
}
catch(Exception ex)
{
	MessageBox.Show("Error in the template: " + ex.ToString());
}
#>
<#@ include file="PageObject.Main.tt" #>