



using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using TechTalk.SpecFlow;
using SpecByExample.Common;
using $basename$.Pages;

namespace $basename$.Specs
{
    [Binding]
    public partial class $specflowstepsclass$ : BaseSeleniumSteps
    {
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="state">State is passed in using Constructor Injection</param>
        public $specflowstepsclass$(SeleniumBrowserInfo state) : base(state) { }


        #region Arrange - Given

        [Given("I go to the MyTestPage on url '(.*)'")]
        public void Given_I_Go_To_Url(string url)
        {
            CurrentWebDriver.Url = url;
            CurrentWebDriver.Navigate();
        }

        #endregion

        #region Act - When


        [When(@"I click the Screen_readerUsersClickHereToTurnOffGoogleInstantLink link")]
        public void When_I_Click_The_Screen_readerUsersClickHereToTurnOffGoogleInstantLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.Screen_readerUsersClickHereToTurnOffGoogleInstantLink.Click();
        }

        [When(@"I click the GmailLink1 link")]
        public void When_I_Click_The_GmailLink1_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.GmailLink1.Click();
        }

        [When(@"I click the ImagesLink link")]
        public void When_I_Click_The_ImagesLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.ImagesLink.Click();
        }

        [When(@"I click the SignInLink link")]
        public void When_I_Click_The_SignInLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.SignInLink.Click();
        }

        [When(@"I click the GoToGoogleHomeLink link")]
        public void When_I_Click_The_GoToGoogleHomeLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.GoToGoogleHomeLink.Click();
        }

        [When(@"I click the LearnMoreLink link")]
        public void When_I_Click_The_LearnMoreLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.LearnMoreLink.Click();
        }

        [When(@"I click the NederlandsLink link")]
        public void When_I_Click_The_NederlandsLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.NederlandsLink.Click();
        }

        [When(@"I click the FryskLink link")]
        public void When_I_Click_The_FryskLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.FryskLink.Click();
        }

        [When(@"I click the PrivacyLink link")]
        public void When_I_Click_The_PrivacyLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.PrivacyLink.Click();
        }

        [When(@"I click the TermsLink link")]
        public void When_I_Click_The_TermsLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.TermsLink.Click();
        }

        [When(@"I click the SettingsLink link")]
        public void When_I_Click_The_SettingsLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.SettingsLink.Click();
        }

        [When(@"I click the SearchSettingsLink link")]
        public void When_I_Click_The_SearchSettingsLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.SearchSettingsLink.Click();
        }

        [When(@"I click the AdvancedSearchLink link")]
        public void When_I_Click_The_AdvancedSearchLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.AdvancedSearchLink.Click();
        }

        [When(@"I click the HistoryLink link")]
        public void When_I_Click_The_HistoryLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.HistoryLink.Click();
        }

        [When(@"I click the SearchHelpLink link")]
        public void When_I_Click_The_SearchHelpLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.SearchHelpLink.Click();
        }

        [When(@"I click the SendFeedbackLink link")]
        public void When_I_Click_The_SendFeedbackLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.SendFeedbackLink.Click();
        }

        [When(@"I click the AdvertisingLink link")]
        public void When_I_Click_The_AdvertisingLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.AdvertisingLink.Click();
        }

        [When(@"I click the BusinessLink link")]
        public void When_I_Click_The_BusinessLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.BusinessLink.Click();
        }

        [When(@"I click the AboutLink link")]
        public void When_I_Click_The_AboutLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.AboutLink.Click();
        }

        [When(@"I click the MyAccountLink link")]
        public void When_I_Click_The_MyAccountLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.MyAccountLink.Click();
        }

        [When(@"I click the SearchLink link")]
        public void When_I_Click_The_SearchLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.SearchLink.Click();
        }

        [When(@"I click the MapsLink link")]
        public void When_I_Click_The_MapsLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.MapsLink.Click();
        }

        [When(@"I click the YouTubeLink link")]
        public void When_I_Click_The_YouTubeLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.YouTubeLink.Click();
        }

        [When(@"I click the PlayLink link")]
        public void When_I_Click_The_PlayLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.PlayLink.Click();
        }

        [When(@"I click the GmailLink21 link")]
        public void When_I_Click_The_GmailLink21_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.GmailLink21.Click();
        }

        [When(@"I click the DriveLink link")]
        public void When_I_Click_The_DriveLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.DriveLink.Click();
        }

        [When(@"I click the CalendarLink link")]
        public void When_I_Click_The_CalendarLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.CalendarLink.Click();
        }

        [When(@"I click the GooglePlusLink link")]
        public void When_I_Click_The_GooglePlusLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.GooglePlusLink.Click();
        }

        [When(@"I click the TranslateLink link")]
        public void When_I_Click_The_TranslateLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.TranslateLink.Click();
        }

        [When(@"I click the PhotosLink link")]
        public void When_I_Click_The_PhotosLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.PhotosLink.Click();
        }

        [When(@"I click the MoreLink link")]
        public void When_I_Click_The_MoreLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.MoreLink.Click();
        }

        [When(@"I click the ShoppingLink link")]
        public void When_I_Click_The_ShoppingLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.ShoppingLink.Click();
        }

        [When(@"I click the DocsLink link")]
        public void When_I_Click_The_DocsLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.DocsLink.Click();
        }

        [When(@"I click the BooksLink link")]
        public void When_I_Click_The_BooksLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.BooksLink.Click();
        }

        [When(@"I click the BloggerLink link")]
        public void When_I_Click_The_BloggerLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.BloggerLink.Click();
        }

        [When(@"I click the ContactsLink link")]
        public void When_I_Click_The_ContactsLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.ContactsLink.Click();
        }

        [When(@"I click the HangoutsLink link")]
        public void When_I_Click_The_HangoutsLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.HangoutsLink.Click();
        }

        [When(@"I click the EvenMoreFromGoogleLink link")]
        public void When_I_Click_The_EvenMoreFromGoogleLink_Link()
        {
            var screen = GetScreen<$pageclass$>();
            screen.EvenMoreFromGoogleLink.Click();
        }

        [When(@"I click the _fZlButton button")]
        public void When_I_Click_The__fZlButton_Button()
        {
            var screen = GetScreen<$pageclass$>();
            screen._fZlButton.Click();
        }

        [When(@"I type ""(.*)"" in text SearchTextbox")]
        public void When_I_Type_In_Text_SearchTextbox(string text)
        {
            var screen = GetScreen<$pageclass$>();
            screen.SearchTextbox.Text = text;
        }

        [When(@"I type ""(.*)"" in textarea CsiTextarea")]
        public void When_I_Type_In_Textarea_CsiTextarea(string text)
        {
            var screen = GetScreen<$pageclass$>();
            screen.CsiTextarea.Text = text;
        }

        #endregion

        #region Assert - Then

        [Then(@"link Screen_readerUsersClickHereToTurnOffGoogleInstantLink is ([not]?) visible")]
        public void Then_Link_Screen_readerUsersClickHereToTurnOffGoogleInstantLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.Screen_readerUsersClickHereToTurnOffGoogleInstantLink.IsDisplayed, visible);
        }

        [Then(@"link Screen_readerUsersClickHereToTurnOffGoogleInstantLink is ([not]?) enabled")]
        public void Then_Link_Screen_readerUsersClickHereToTurnOffGoogleInstantLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.Screen_readerUsersClickHereToTurnOffGoogleInstantLink.IsEnabled, enabled);
        }

        [Then(@"link GmailLink1 is ([not]?) visible")]
        public void Then_Link_GmailLink1_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.GmailLink1.IsDisplayed, visible);
        }

        [Then(@"link GmailLink1 is ([not]?) enabled")]
        public void Then_Link_GmailLink1_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.GmailLink1.IsEnabled, enabled);
        }

        [Then(@"link ImagesLink is ([not]?) visible")]
        public void Then_Link_ImagesLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.ImagesLink.IsDisplayed, visible);
        }

        [Then(@"link ImagesLink is ([not]?) enabled")]
        public void Then_Link_ImagesLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.ImagesLink.IsEnabled, enabled);
        }

        [Then(@"link SignInLink is ([not]?) visible")]
        public void Then_Link_SignInLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.SignInLink.IsDisplayed, visible);
        }

        [Then(@"link SignInLink is ([not]?) enabled")]
        public void Then_Link_SignInLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.SignInLink.IsEnabled, enabled);
        }

        [Then(@"link GoToGoogleHomeLink is ([not]?) visible")]
        public void Then_Link_GoToGoogleHomeLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.GoToGoogleHomeLink.IsDisplayed, visible);
        }

        [Then(@"link GoToGoogleHomeLink is ([not]?) enabled")]
        public void Then_Link_GoToGoogleHomeLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.GoToGoogleHomeLink.IsEnabled, enabled);
        }

        [Then(@"link LearnMoreLink is ([not]?) visible")]
        public void Then_Link_LearnMoreLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.LearnMoreLink.IsDisplayed, visible);
        }

        [Then(@"link LearnMoreLink is ([not]?) enabled")]
        public void Then_Link_LearnMoreLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.LearnMoreLink.IsEnabled, enabled);
        }

        [Then(@"link NederlandsLink is ([not]?) visible")]
        public void Then_Link_NederlandsLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.NederlandsLink.IsDisplayed, visible);
        }

        [Then(@"link NederlandsLink is ([not]?) enabled")]
        public void Then_Link_NederlandsLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.NederlandsLink.IsEnabled, enabled);
        }

        [Then(@"link FryskLink is ([not]?) visible")]
        public void Then_Link_FryskLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.FryskLink.IsDisplayed, visible);
        }

        [Then(@"link FryskLink is ([not]?) enabled")]
        public void Then_Link_FryskLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.FryskLink.IsEnabled, enabled);
        }

        [Then(@"link PrivacyLink is ([not]?) visible")]
        public void Then_Link_PrivacyLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.PrivacyLink.IsDisplayed, visible);
        }

        [Then(@"link PrivacyLink is ([not]?) enabled")]
        public void Then_Link_PrivacyLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.PrivacyLink.IsEnabled, enabled);
        }

        [Then(@"link TermsLink is ([not]?) visible")]
        public void Then_Link_TermsLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.TermsLink.IsDisplayed, visible);
        }

        [Then(@"link TermsLink is ([not]?) enabled")]
        public void Then_Link_TermsLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.TermsLink.IsEnabled, enabled);
        }

        [Then(@"link SettingsLink is ([not]?) visible")]
        public void Then_Link_SettingsLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.SettingsLink.IsDisplayed, visible);
        }

        [Then(@"link SettingsLink is ([not]?) enabled")]
        public void Then_Link_SettingsLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.SettingsLink.IsEnabled, enabled);
        }

        [Then(@"link SearchSettingsLink is ([not]?) visible")]
        public void Then_Link_SearchSettingsLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.SearchSettingsLink.IsDisplayed, visible);
        }

        [Then(@"link SearchSettingsLink is ([not]?) enabled")]
        public void Then_Link_SearchSettingsLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.SearchSettingsLink.IsEnabled, enabled);
        }

        [Then(@"link AdvancedSearchLink is ([not]?) visible")]
        public void Then_Link_AdvancedSearchLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.AdvancedSearchLink.IsDisplayed, visible);
        }

        [Then(@"link AdvancedSearchLink is ([not]?) enabled")]
        public void Then_Link_AdvancedSearchLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.AdvancedSearchLink.IsEnabled, enabled);
        }

        [Then(@"link HistoryLink is ([not]?) visible")]
        public void Then_Link_HistoryLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.HistoryLink.IsDisplayed, visible);
        }

        [Then(@"link HistoryLink is ([not]?) enabled")]
        public void Then_Link_HistoryLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.HistoryLink.IsEnabled, enabled);
        }

        [Then(@"link SearchHelpLink is ([not]?) visible")]
        public void Then_Link_SearchHelpLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.SearchHelpLink.IsDisplayed, visible);
        }

        [Then(@"link SearchHelpLink is ([not]?) enabled")]
        public void Then_Link_SearchHelpLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.SearchHelpLink.IsEnabled, enabled);
        }

        [Then(@"link SendFeedbackLink is ([not]?) visible")]
        public void Then_Link_SendFeedbackLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.SendFeedbackLink.IsDisplayed, visible);
        }

        [Then(@"link SendFeedbackLink is ([not]?) enabled")]
        public void Then_Link_SendFeedbackLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.SendFeedbackLink.IsEnabled, enabled);
        }

        [Then(@"link AdvertisingLink is ([not]?) visible")]
        public void Then_Link_AdvertisingLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.AdvertisingLink.IsDisplayed, visible);
        }

        [Then(@"link AdvertisingLink is ([not]?) enabled")]
        public void Then_Link_AdvertisingLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.AdvertisingLink.IsEnabled, enabled);
        }

        [Then(@"link BusinessLink is ([not]?) visible")]
        public void Then_Link_BusinessLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.BusinessLink.IsDisplayed, visible);
        }

        [Then(@"link BusinessLink is ([not]?) enabled")]
        public void Then_Link_BusinessLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.BusinessLink.IsEnabled, enabled);
        }

        [Then(@"link AboutLink is ([not]?) visible")]
        public void Then_Link_AboutLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.AboutLink.IsDisplayed, visible);
        }

        [Then(@"link AboutLink is ([not]?) enabled")]
        public void Then_Link_AboutLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.AboutLink.IsEnabled, enabled);
        }

        [Then(@"link MyAccountLink is ([not]?) visible")]
        public void Then_Link_MyAccountLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.MyAccountLink.IsDisplayed, visible);
        }

        [Then(@"link MyAccountLink is ([not]?) enabled")]
        public void Then_Link_MyAccountLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.MyAccountLink.IsEnabled, enabled);
        }

        [Then(@"link SearchLink is ([not]?) visible")]
        public void Then_Link_SearchLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.SearchLink.IsDisplayed, visible);
        }

        [Then(@"link SearchLink is ([not]?) enabled")]
        public void Then_Link_SearchLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.SearchLink.IsEnabled, enabled);
        }

        [Then(@"link MapsLink is ([not]?) visible")]
        public void Then_Link_MapsLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.MapsLink.IsDisplayed, visible);
        }

        [Then(@"link MapsLink is ([not]?) enabled")]
        public void Then_Link_MapsLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.MapsLink.IsEnabled, enabled);
        }

        [Then(@"link YouTubeLink is ([not]?) visible")]
        public void Then_Link_YouTubeLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.YouTubeLink.IsDisplayed, visible);
        }

        [Then(@"link YouTubeLink is ([not]?) enabled")]
        public void Then_Link_YouTubeLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.YouTubeLink.IsEnabled, enabled);
        }

        [Then(@"link PlayLink is ([not]?) visible")]
        public void Then_Link_PlayLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.PlayLink.IsDisplayed, visible);
        }

        [Then(@"link PlayLink is ([not]?) enabled")]
        public void Then_Link_PlayLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.PlayLink.IsEnabled, enabled);
        }

        [Then(@"link GmailLink21 is ([not]?) visible")]
        public void Then_Link_GmailLink21_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.GmailLink21.IsDisplayed, visible);
        }

        [Then(@"link GmailLink21 is ([not]?) enabled")]
        public void Then_Link_GmailLink21_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.GmailLink21.IsEnabled, enabled);
        }

        [Then(@"link DriveLink is ([not]?) visible")]
        public void Then_Link_DriveLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.DriveLink.IsDisplayed, visible);
        }

        [Then(@"link DriveLink is ([not]?) enabled")]
        public void Then_Link_DriveLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.DriveLink.IsEnabled, enabled);
        }

        [Then(@"link CalendarLink is ([not]?) visible")]
        public void Then_Link_CalendarLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.CalendarLink.IsDisplayed, visible);
        }

        [Then(@"link CalendarLink is ([not]?) enabled")]
        public void Then_Link_CalendarLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.CalendarLink.IsEnabled, enabled);
        }

        [Then(@"link GooglePlusLink is ([not]?) visible")]
        public void Then_Link_GooglePlusLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.GooglePlusLink.IsDisplayed, visible);
        }

        [Then(@"link GooglePlusLink is ([not]?) enabled")]
        public void Then_Link_GooglePlusLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.GooglePlusLink.IsEnabled, enabled);
        }

        [Then(@"link TranslateLink is ([not]?) visible")]
        public void Then_Link_TranslateLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.TranslateLink.IsDisplayed, visible);
        }

        [Then(@"link TranslateLink is ([not]?) enabled")]
        public void Then_Link_TranslateLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.TranslateLink.IsEnabled, enabled);
        }

        [Then(@"link PhotosLink is ([not]?) visible")]
        public void Then_Link_PhotosLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.PhotosLink.IsDisplayed, visible);
        }

        [Then(@"link PhotosLink is ([not]?) enabled")]
        public void Then_Link_PhotosLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.PhotosLink.IsEnabled, enabled);
        }

        [Then(@"link MoreLink is ([not]?) visible")]
        public void Then_Link_MoreLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.MoreLink.IsDisplayed, visible);
        }

        [Then(@"link MoreLink is ([not]?) enabled")]
        public void Then_Link_MoreLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.MoreLink.IsEnabled, enabled);
        }

        [Then(@"link ShoppingLink is ([not]?) visible")]
        public void Then_Link_ShoppingLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.ShoppingLink.IsDisplayed, visible);
        }

        [Then(@"link ShoppingLink is ([not]?) enabled")]
        public void Then_Link_ShoppingLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.ShoppingLink.IsEnabled, enabled);
        }

        [Then(@"link DocsLink is ([not]?) visible")]
        public void Then_Link_DocsLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.DocsLink.IsDisplayed, visible);
        }

        [Then(@"link DocsLink is ([not]?) enabled")]
        public void Then_Link_DocsLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.DocsLink.IsEnabled, enabled);
        }

        [Then(@"link BooksLink is ([not]?) visible")]
        public void Then_Link_BooksLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.BooksLink.IsDisplayed, visible);
        }

        [Then(@"link BooksLink is ([not]?) enabled")]
        public void Then_Link_BooksLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.BooksLink.IsEnabled, enabled);
        }

        [Then(@"link BloggerLink is ([not]?) visible")]
        public void Then_Link_BloggerLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.BloggerLink.IsDisplayed, visible);
        }

        [Then(@"link BloggerLink is ([not]?) enabled")]
        public void Then_Link_BloggerLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.BloggerLink.IsEnabled, enabled);
        }

        [Then(@"link ContactsLink is ([not]?) visible")]
        public void Then_Link_ContactsLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.ContactsLink.IsDisplayed, visible);
        }

        [Then(@"link ContactsLink is ([not]?) enabled")]
        public void Then_Link_ContactsLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.ContactsLink.IsEnabled, enabled);
        }

        [Then(@"link HangoutsLink is ([not]?) visible")]
        public void Then_Link_HangoutsLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.HangoutsLink.IsDisplayed, visible);
        }

        [Then(@"link HangoutsLink is ([not]?) enabled")]
        public void Then_Link_HangoutsLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.HangoutsLink.IsEnabled, enabled);
        }

        [Then(@"link EvenMoreFromGoogleLink is ([not]?) visible")]
        public void Then_Link_EvenMoreFromGoogleLink_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.EvenMoreFromGoogleLink.IsDisplayed, visible);
        }

        [Then(@"link EvenMoreFromGoogleLink is ([not]?) enabled")]
        public void Then_Link_EvenMoreFromGoogleLink_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.EvenMoreFromGoogleLink.IsEnabled, enabled);
        }

        [Then(@"button _fZlButton is ([not]?) visible")]
        public void Then_Button__fZlButton_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen._fZlButton.IsDisplayed, visible);
        }

        [Then(@"button _fZlButton is ([not]?) enabled")]
        public void Then_Button__fZlButton_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen._fZlButton.IsEnabled, enabled);
        }

        [Then(@"text SearchTextbox is ([not]?) visible")]
        public void Then_Text_SearchTextbox_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.SearchTextbox.IsDisplayed, visible);
        }

        [Then(@"text SearchTextbox is ([not]?) enabled")]
        public void Then_Text_SearchTextbox_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.SearchTextbox.IsEnabled, enabled);
        }

        [Then(@"the text in text SearchTextbox is ""(.*)""")]
        public void Then_The_Text_in_Text_SearchTextbox_Is(string text)
        {
            var screen = GetScreen<$pageclass$>();
            Assert.AreEqual(screen.SearchTextbox.Text, text);
        }

        [Then(@"textarea CsiTextarea is ([not]?) visible")]
        public void Then_Textarea_CsiTextarea_Check_Visibility(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool visible = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.CsiTextarea.IsDisplayed, visible);
        }

        [Then(@"textarea CsiTextarea is ([not]?) enabled")]
        public void Then_Textarea_CsiTextarea_Check_Enabled(string not)
        {
            var screen = GetScreen<$pageclass$>();
			bool enabled = String.IsNullOrEmpty(not);
			Assert.AreEqual(screen.CsiTextarea.IsEnabled, enabled);
        }

        [Then(@"the text in textarea CsiTextarea is ""(.*)""")]
        public void Then_The_Text_in_Textarea_CsiTextarea_Is(string text)
        {
            var screen = GetScreen<$pageclass$>();
            Assert.AreEqual(screen.CsiTextarea.Text, text);
        }
        #endregion
    }
}

