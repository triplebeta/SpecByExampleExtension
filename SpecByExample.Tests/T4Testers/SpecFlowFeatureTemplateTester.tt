<#@ output extension=".txt" #>
<#@ assembly name="$(SolutionDir)\packages\HtmlAgilityPack.1.4.9.5\lib\Net40\HtmlAgilityPack.dll" #>
<#@ assembly name="$(SolutionDir)\SpecByExample.T4\bin\Debug\SpecByExample.T4.dll" #>
<#
	/* This file is just to start another template for testing */

	var testSettings = new CodeGenerationSettings(); 
	testSettings.Url = "https://www.google.nl";
	testSettings.PageName= "MyTestPage";
	testSettings.PageInfo.PageNumber = "S123";
	testSettings.CreateSpecFlowStepsFile = true;
	testSettings.CreateSpecFlowFeatureFile = true;

	// Use the WebBrowser control to load the page and render it, this ensures all JavaScript will be executed as well.
    // Then feed the HTML to the HtmlAgilityPack document.
	var webbrowser = new WebBrowser();
    webbrowser.Navigate(new Uri(testSettings.Url));
    while (webbrowser.ReadyState != WebBrowserReadyState.Complete)
    {
        // Dirty but the most easy way to wait for it synchroneously
        System.Threading.Thread.Sleep(250);
        Application.DoEvents();
    }

	// NOTE: This works only because the Template tag in the Main file contains the attribute hostspecific="true"
	string configFile = Host.ResolvePath(@"..\ControlAdapterMapping.config");
	var config = WizardConfigLoader.LoadWizardConfiguration(configFile);
	if (config==null)
		throw new InvalidOperationException("Configuration file not found or it is invalid.");

	// At this point, the HTML is loaded completely
    string html = webbrowser.DocumentText;
	var htmlLoader = new HtmlLoader(config.RegisteredControlTypes);
    var doc = htmlLoader.LoadDocumentFromHtml(html);
	testSettings.SelectedHtmlElements = htmlLoader.GetHtmlControls(doc, config.RegisteredControlTypes, testSettings.Options);
	testSettings.PageInfo = htmlLoader.GetPageInfo(testSettings.Url, config, testSettings.Options);

	Session.Add("WizardSettings",testSettings);
#>
<#@ include file="$(SolutionDir)\SpecByExample.T4\Templates\SpecFlowFeature.Main.tt" #>